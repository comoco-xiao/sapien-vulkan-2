// -*- mode: glsl;-*-
#version 450
layout(set = 0, binding = 0) uniform samplerCube EnvMap;
layout(set = 1, binding = 0, rgba8) uniform writeonly imageCube OutEnvMap;

layout( push_constant ) uniform Constants
{
	float roughness;
} constants;

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits) {
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
vec2 Hammersley(uint i, uint N) {
  return vec2(float(i)/float(N), radicalInverse_VdC(i));
}

// Image-Based Lighting
// http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf
vec3 ImportanceSampleGGX( vec2 Xi, float Roughness, vec3 N )
{
  float PI = 3.1415926535897932384626433832795;

  float a = Roughness * Roughness;

  float Phi = 2 * PI * Xi.x;
  float CosTheta = sqrt( (1 - Xi.y) / ( 1 + (a*a - 1) * Xi.y ) );
  float SinTheta = sqrt( 1 - CosTheta * CosTheta );

  vec3 H;
  H.x = SinTheta * cos( Phi );
  H.y = SinTheta * sin( Phi );
  H.z = CosTheta;

  vec3 UpVector = abs(N.z) < 0.999 ? vec3(0,0,1) : vec3(1,0,0);
  vec3 TangentX = normalize( cross( UpVector, N ) );
  vec3 TangentY = cross( N, TangentX );

  // Tangent to world space
  return TangentX * H.x + TangentY * H.y + N * H.z;
}

vec3 PrefilterEnvMap(float Roughness, vec3 R) {
  vec3 N = R;
  vec3 V = R;
  vec3 PrefilteredColor = vec3(0);
  float TotalWeight = 0;

  const uint NumSamples = 1024;
  for (uint i = 0; i < NumSamples; ++i) {
    vec2 Xi = Hammersley(i, NumSamples);
    vec3 H = ImportanceSampleGGX(Xi, Roughness, N);
    vec3 L = 2 * dot(V, H) * H - V;
    float dotNL = max(dot(N, L), 0.0);

    if (dotNL > 0) {
      // HACK: clamp to 0 1 to avoid artifacts
      PrefilteredColor += clamp(textureLod(EnvMap, L, 0).rgb * dotNL, vec3(0), vec3(1));
      TotalWeight += dotNL;
    }
  }
  return PrefilteredColor / TotalWeight;
}

// http://alinloghin.com/articles/compute_ibl.html
vec3 cubeCoordToWorld(ivec3 cubeCoord, vec2 cubemapSize)
{
  vec2 texCoord = vec2(cubeCoord.xy) / cubemapSize;
  texCoord = texCoord  * 2.0 - 1.0; // -1..1
  switch(cubeCoord.z)
  {
    case 0: return vec3(1.0, -texCoord.yx); // posx
    case 1: return vec3(-1.0, -texCoord.y, texCoord.x); //negx
    case 2: return vec3(texCoord.x, 1.0, texCoord.y); // posy
    case 3: return vec3(texCoord.x, -1.0, -texCoord.y); //negy
    case 4: return vec3(texCoord.x, -texCoord.y, 1.0); // posz
    case 5: return vec3(-texCoord.xy, -1.0); // negz
  }
  return vec3(0.0);
}

void main() {
  uint x = gl_GlobalInvocationID.x;
  uint y = gl_GlobalInvocationID.y;
  uint z = gl_GlobalInvocationID.z;
  ivec2 s = imageSize(OutEnvMap);

  if (x >= s.x || y >= s.y)
    return; // out of bounds

  ivec3 cubeCoord = ivec3(x, y, z);
  vec3 worldPos = cubeCoordToWorld(cubeCoord, vec2(s));

  vec3 R = normalize(worldPos);

  vec3 color = PrefilterEnvMap(constants.roughness, R);
  imageStore(OutEnvMap, cubeCoord, vec4(color, 1));
}
